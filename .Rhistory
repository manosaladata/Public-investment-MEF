length(input$region)
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
shiny::runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-ggplot2 reactive')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-ggplot2 reactive2')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-ggplot2 reactive3')
View(us_contagious_diseases)
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-ggplot2 reactive3')
View(us_contagious_diseases)
View(us_contagious_diseases)
runApp('ShinyAppSIAF')
View(DataGR)
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-subitems')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-subitems - opcion2')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-submenu')
shiny::runApp('ShinyAppSIAF')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-submenu')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-submenu2')
detach("package:semantic.dashboard", unload = TRUE)
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-submenu2')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-submenu2')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-submenu2')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-submenu2')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-submenu2')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-submenu2')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-submenu2')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-submenu2')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-submenu2')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-submenu')
detach("package:semantic.dashboard", unload = TRUE)
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-submenu2')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
shiny::runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-submenu2')
runApp('ShinyAppSIAF')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-submenu')
runApp('ShinyAppSIAF')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-subitems')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-ggplot2 reactive3')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
View(us_contagious_diseases)
shiny::runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
shiny::runApp('ShinyAppSIAF')
View(DataGR)
runApp('ShinyAppSIAF')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-ggplot2 reactive')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-ggplot2 reactive2')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-ggplot2 reactive3')
View(DataGR)
View(us_contagious_diseases)
runApp('ShinyAppSIAF')
View(us_contagious_diseases)
View(DataGR)
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-ggplot2 reactive')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-ggplot2 reactive')
runApp('ShinyAppSIAF')
min(DataGR$Year)
max(DataGR$Year)
View(DataGR)
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-ggplot2 reactive3')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-subitems - opcion2')
runApp('~/GitHub/R proyectos/Shiny-Arturo/prueba-shiny-submenu')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
#Esta primera parte es limpieza de datos
DataGR <- readRDS("Data/InversionTotalDepa.rds")
#Esta primera parte es limpieza de datos
DataGR <- readRDS("Data/InversionTotalDepa.rds")
#Esta primera parte es limpieza de datos
DataGR <- readRDS("ShinyAppSIAF/Data/InversionTotalDepa.rds")
View(DataGR)
DataGR[,c(2:8)] <- sapply(DataGR[,c(2:8)], function(x) str_remove_all(x,pattern = ","))
#library(lubridate)
library(tidyverse)
DataGR[,c(2:8)] <- sapply(DataGR[,c(2:8)], function(x) str_remove_all(x,pattern = ","))
DataGR[,c(2:8)] <- sapply(DataGR[,c(2:8)], function(x) round(as.numeric(x)/1000000,3)) #Convertir en millones de soles
DataGR <- DataGR%>%
separate(col = 1,into = c("Codigo_Pliego","G_Regional"),sep = ": ")
DataGR[,2] <- sapply(DataGR[,2],function(x) str_to_title(x,locale = "sp")) #en
DataGR[,2] <- sapply(DataGR[,2],function(x) str_replace_all(x,pattern = "Provincia Constitucional Del Callao",
replacement = "Callao"))
View(DataGR)
View(DataGR)
DataGR <- DataGR%>%
select(11,-1,everything())
View(DataGR)
#Esta primera parte es limpieza de datos
DataGR <- readRDS("ShinyAppSIAF/Data/InversionTotalDepa.rds")
DataGR[,c(2:8)] <- sapply(DataGR[,c(2:8)], function(x) str_remove_all(x,pattern = ","))
DataGR[,c(2:8)] <- sapply(DataGR[,c(2:8)], function(x) round(as.numeric(x)/1000000,3)) #Convertir en millones de soles
DataGR <- DataGR%>%
separate(col = 1,into = c("Codigo_Pliego","G_Regional"),sep = ": ")
DataGR[,2] <- sapply(DataGR[,2],function(x) str_to_title(x,locale = "sp")) #en
DataGR[,2] <- sapply(DataGR[,2],function(x) str_replace_all(x,pattern = "Provincia Constitucional Del Callao",
replacement = "Callao"))
#DataGR[,2] <- sapply(DataGR[,2],function(x) as.character(x))
DataGR <- DataGR%>%
select(c(-1,11),everything())
View(DataGR)
DataGR[,c(2:8)] <- sapply(DataGR[,c(2:8)], function(x) str_remove_all(x,pattern = ","))
#Esta primera parte es limpieza de datos
DataGR <- readRDS("ShinyAppSIAF/Data/InversionTotalDepa.rds")
DataGR[,c(2:8)] <- sapply(DataGR[,c(2:8)], function(x) str_remove_all(x,pattern = ","))
DataGR[,c(2:8)] <- sapply(DataGR[,c(2:8)], function(x) round(as.numeric(x)/1000000,3)) #Convertir en millones de soles
DataGR <- DataGR%>%
separate(col = 1,into = c("Codigo_Pliego","G_Regional"),sep = ": ")
DataGR[,2] <- sapply(DataGR[,2],function(x) str_to_title(x,locale = "sp")) #en
#DataGR[,2] <- sapply(DataGR[,2],function(x) as.character(x))
DataGR <- DataGR%>%
select(-1)%>%
select(11,everything())
View(DataGR)
#DataGR[,2] <- sapply(DataGR[,2],function(x) as.character(x))
DataGR <- DataGR%>%
select(-1)%>%
select(10,everything())
View(DataGR)
DataGR <- DataGR%>%
mutate(A침o=as.Date(paste0(Year,"-01-01", sep = "", format='%Y-%b-%d')))
View(DataGR)
View(DataGR)
#Esta primera parte es limpieza de datos
DataGR <- readRDS("ShinyAppSIAF/Data/InversionTotalDepa.rds")
DataGR[,c(2:8)] <- sapply(DataGR[,c(2:8)], function(x) str_remove_all(x,pattern = ","))
DataGR[,c(2:8)] <- sapply(DataGR[,c(2:8)], function(x) round(as.numeric(x)/1000000,3)) #Convertir en millones de soles
DataGR <- DataGR%>%
separate(col = 1,into = c("Codigo_Pliego","G_Regional"),sep = ": ")
DataGR[,2] <- sapply(DataGR[,2],function(x) str_to_title(x,locale = "sp")) #en
DataGR[,2] <- sapply(DataGR[,2],function(x) str_replace_all(x,pattern = "Provincia Constitucional Del Callao",
replacement = "Callao"))
#DataGR[,2] <- sapply(DataGR[,2],function(x) as.character(x))
DataGR <- DataGR%>%
mutate(A침o=as.Date(paste0(Year,"-01-01", sep = "", format='%Y-%b-%d')))
View(DataGR)
DataGR <- DataGR%>%
select(-c(1,11))%>%
select(10,everything())
View(DataGR)
shiny::runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
View(DataGR)
View(DataGR)
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
rlang::last_error()`
`rlang::last_error()`
View(DataGR)
runApp('ShinyAppSIAF')
View(DataGR)
shiny::runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
shiny::runApp('~/GitHub/R proyectos/ShinyApps/ShinyTowards')
runApp('~/GitHub/R proyectos/ShinyApps/ShinyTowards')
runApp('~/GitHub/R proyectos/ShinyApps/ShinyAppsilon')
trans <- readRDS("./data/trans.RDS")
runApp('~/GitHub/R proyectos/ShinyApps/shiny-insurance-examples/basic-insurer-dashboard')
View(display_names)
View(trans)
runApp('~/GitHub/R proyectos/ShinyApps/shiny-insurance-examples/basic-insurer-dashboard')
runApp('~/GitHub/R proyectos/ShinyApps/shiny-insurance-examples/basic-insurer-dashboard')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
View(DataGR)
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('~/GitHub/R proyectos/ShinyApps/shiny-insurance-examples/bootstrap-claims-sim')
View(claims)
runApp('~/GitHub/R proyectos/ShinyApps/shiny-insurance-examples/freq-sev-claims-sim')
#---- Actuarial #----
install.packages("actuar")
runApp('~/GitHub/R proyectos/ShinyApps/shiny-insurance-examples/freq-sev-claims-sim')
install.packages("sde") #Simulaci칩n e inferencia para ecuaciones diferenciales estoc치sticas
runApp('~/GitHub/R proyectos/ShinyApps/shiny-insurance-examples/interest-rate-walk')
runApp('~/GitHub/R proyectos/ShinyApps/shiny-insurance-examples/medicare-map')
View(states)
runApp('~/GitHub/R proyectos/ShinyApps/shiny-insurance-examples/parallelogram-method')
runApp('~/GitHub/R proyectos/ShinyApps/shiny-insurance-examples/wc-pm-dashboard')
runApp('~/GitHub/R proyectos/ShinyApps/ProjectManagement')
runApp('~/GitHub/R proyectos/ShinyApps/cranwhales')
shiny::runApp('~/GitHub/R proyectos/ShinyApps/GuiaApp')
runApp('ShinyAppSIAF')
runApp('~/GitHub/R proyectos/ShinyApps/GuiaApp')
runApp('~/GitHub/R proyectos/ShinyApps/in_household/shiny')
runApp('~/GitHub/R proyectos/ShinyApps/in_household/shiny_thematic_mapping')
runApp('~/GitHub/R proyectos/ShinyApps/in_household/shinydash')
runApp('~/GitHub/R proyectos/ShinyApps/in_household/shinydash')
View(data)
runApp('~/GitHub/R proyectos/ShinyApps/Shiny-Stream-Code/ui_dinamico')
runApp('~/GitHub/R proyectos/ShinyApps/Shiny-Stream-Code/shny-inputs')
runApp('~/GitHub/R proyectos/ShinyApps/Shiny-Stream-Code/Shiny-ejemplo')
runApp('~/GitHub/R proyectos/ShinyApps/Shiny-Stream-Code/plots_interaction')
runApp('~/GitHub/R proyectos/ShinyApps/Shiny-Stream-Code/parameters_ejemplo')
runApp('~/GitHub/R proyectos/ShinyApps/Shiny-Stream-Code/dt_tablas')
runApp('~/GitHub/R proyectos/ShinyApps/Shiny-Stream-Code/db_connect/flights_shiny')
runApp('~/GitHub/R proyectos/ShinyApps/ShinyPIB_Varios')
shiny::runApp('~/GitHub/R proyectos/ShinyApps/shiny-insurance-examples/basic-insurer-dashboard')
runApp('ShinyAppSIAF')
View(DataGR)
runApp('ShinyAppSIAF')
View(DataGR)
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('ShinyAppSIAF')
runApp('~/GitHub/R proyectos/ShinyApps/shiny-insurance-examples/basic-insurer-dashboard')
runApp('~/GitHub/R proyectos/ShinyApps/ProjectManagement')
runApp('ShinyAppSIAF')
runApp('~/GitHub/R proyectos/ShinyApps/ProjectManagement')
runApp('ShinyAppSIAF')
round(as.numeric(Valores$dat$meanPIA), 0)
runApp('ShinyAppSIAF')
install.packages("ckanr") #Client for 'CKAN' API
get_test_url()?
ckanr::get_test_url()
ckanr::get_test_url("https://mef.creainter.com.pe")
ckanr::ckanr_setup(url = "https://mef.creainter.com.pe")
ckanr::get_test_url()
ckanr::ckanr_setup(url = "https://mef.creainter.com.pe")
ckanr::group_list()
#Acceso a datos de la inversion publica a traves de la Api CKAN
library(tidyverse)
library(ckanr)
library(jsonlite)
library(readxl)
library(curl)
library(readxl)
url_site <- "https://data.gov.au/"
ckanr_setup(url = url_site)
#Buscando en la base de datos para ver qu칠 hay
group_list(as = "table")
group_list(limit = 2)
package_list(as = "table")
#Mas informacion sobre el paquete
package_show("038c169b-606f-4478-99db-e3125319b321")
#podemos hacer una b칰squeda m치s espec칤fica dentro de los recursos.
x <- resource_search(q = "name:foreign affairs", limit = 5)
x$results
#Accediendo a la informaci칩n
url<-resource_show(id ="9475a3f7-ba5f-46e4-9391-9f2a82cea51b")
url$url
#Ahora tenemos la URL de los datos, as칤 que import칠mosla.
url <- ("https://data.gov.au/data/dataset/0c516e3a-0fb0-45a4-ac3f-0ab33c265885/resource/9475a3f7-ba5f-46e4-9391-9f2a82cea51b/download/foreign-affairs-and-trade-2016-17-pbs.xlsx")
destfile <- ("foreign_affairs_and_trade_2016_17_pbs.xlsx")
curl::curl_download(url, destfile)
foreign_affairs_and_trade_2016_17_pbs <- read_excel(destfile, col_names = c("Item", "2015-2016", "2016-2017"), skip = 2)
View(foreign_affairs_and_trade_2016_17_pbs)
View(foreign_affairs_and_trade_2016_17_pbs)
#Aplicado al mef
url_site <- "https://mef.creainter.com.pe"
ckanr_setup(url = url_site)
#Buscando en la base de datos para ver qu칠 hay
group_list(as = "table")
group_list(limit = 2)
url<-resource_show(id ="7d2995ab-826f-4da6-aafd-30e8e4f6a657")
url$url
#Aplicado al mef
url_site <- "https://mef.creainter.com.pe"
ckanr_setup(url = url_site)
#Conenctando a sitio web
#Elemplo externo
url_site <- "https://data.gov.au/"
ckanr_setup(url = url_site)
#Buscando en la base de datos para ver qu칠 hay
group_list(as = "table")
#Aplicado al mef
url_site <- "https://mef.creainter.com.pe"
ckanr_setup(url = url_site)
url<-resource_show(id ="7d2995ab-826f-4da6-aafd-30e8e4f6a657")
url$url
#Buscando en la base de datos para ver qu칠 hay
group_list(as = "table")
group_list(limit = 2)
#Aplicado al mef
# url_site <- "https://mef.creainter.com.pe"
# ckanr_setup(url = url_site)
url <- resource_show(id ="7d2995ab-826f-4da6-aafd-30e8e4f6a657")
url$url
#Aplicado al mef
# url_site <- "https://mef.creainter.com.pe"
# ckanr_setup(url = url_site)
URL <- resource_show(id ="7d2995ab-826f-4da6-aafd-30e8e4f6a657") #Defrente con el Id
#Aplicado al mef
# url_site <- "https://mef.creainter.com.pe"
# ckanr_setup(url = url_site)
Url <- resource_show(id ="7d2995ab-826f-4da6-aafd-30e8e4f6a657") #Defrente con el Id
#Acceso a datos de la inversion publica a traves de la Api CKAN
library(tidyverse)
library(ckanr)
library(jsonlite)
#library(readxl)
library(curl)
#Aplicado al mef
# url_site <- "https://mef.creainter.com.pe"
# ckanr_setup(url = url_site)
Url <- resource_show(id ="7d2995ab-826f-4da6-aafd-30e8e4f6a657") #Defrente con el Id
#Aplicado al mef
url_site <- "https://mef.creainter.com.pe"
ckanr_setup(url = url_site)
Url <- resource_show(id ="7d2995ab-826f-4da6-aafd-30e8e4f6a657") #Defrente con el Id
UrlUser <- Url$url #obtenemos la url para acceder a los datos
#Buscando en la base de datos para ver qu칠 hay
group_list(as = "table")
group_list(limit = 2)
UrlUser
Data <- curl::curl_download(UrlUser)
destfile <- ("DETALLE_INVERSIONES.csv")
Data <- curl::curl_download(UrlUser,destfile)
Data
Data <- read.csvdestfile)
Data <- read.csv(file = destfile)
View(Data)
names(Data)
unique(Data$PMI_ANIO_1)
unique(Data$UBIGEO)
unique(Data$ANIO_PROCESO)
unique(Data$REGISTRADO_PMI)
unique(Data$AVAN_FISICO_F12B)
unique(Data$FECHA_REGISTRO)
sapply(Data, class)
min(Data$FECHA_REGISTRO)
Data2 <- Data%>%
filter(FECHA_REGISTRO<="26-11-2003")
View(Data2)
unique(Data2$FECHA_REGISTRO)
min(Data2$FECHA_REGISTRO)
library(lubridate)
Data2$FECHA_REGISTRO <- as.Date(Data2$FECHA_REGISTRO)
unique(Data2$FECHA_REGISTRO)
Data2 <- Data%>%
filter(FECHA_REGISTRO<="26-11-2003")
Data2$FECHA_REGISTRO <- as.Date(Data2$FECHA_REGISTRO,format="%d/%m/%Y")
unique(Data2$FECHA_REGISTRO)
min(Data2$FECHA_REGISTRO)
Data2 <- Data%>%
filter(FECHA_REGISTRO<="26-11-2003")
unique(Data2$FECHA_REGISTRO)
Data2$FECHA_REGISTRO <- dmy(Data2$FECHA_REGISTRO) #Covertimos al formato R= "%Y/%m/%d"
unique(Data2$FECHA_REGISTRO)
min(Data2$FECHA_REGISTRO)
shiny::runApp('ShinyAppSIAF')
(2021/06/13)-(2020/07/22)
(2021/11/03)-(2021/06/14)
as.Date('2021/11/03')-as.Date('2021/06/14')
142/30
as.Date('2021/06/13')-as.Date('2020/07/22')
326/30
as.Date('2021/08/13')-as.Date('2020/07/22')
387/30
as.Date('2021/07/13')-as.Date('2020/07/22')
356/30
as.Date('2021/07/23')-as.Date('2020/07/22')
366/30
shiny::runApp('ShinyAppSIAF')
shiny::runApp('ShinyAppSIAF')
shiny::runApp('ShinyAppSIAF')
shiny::runApp('~/GitHub/R proyectos/ShinyApps/Shiny-CDM-Dashboard-KPIs')
runApp('~/GitHub/R proyectos/ShinyApps/Shiny-CDM-Dashboard-KPIs')
runApp('~/GitHub/R proyectos/ShinyApps/Shiny-CDM-Dashboard-KPIs')
runApp('~/GitHub/R proyectos/ShinyApps/Shiny-CDM-Dashboard-KPIs')
#---- Machine Learning #----
install.packages("MLmetrics")
library(openxlsx)
library(tidyverse)
library(data.table)
library(caret)
library(ranger)
library(MLmetrics)
bankHolidayList<-read.xlsx("https://github.com/JoseLuisLP/Data_Team_Blog_Posts/tree/master/TrafficAccidents/data/BankHolidaysScotland.xlsx", sheet = 1)
bankHolidayList <- read.xlsx("https://github.com/JoseLuisLP/Data_Team_Blog_Posts/tree/master/TrafficAccidents/data/BankHolidaysScotland.xlsx", sheet = 1)
bankHolidayList <- read.xlsx(xlsxFile = "https://github.com/JoseLuisLP/Data_Team_Blog_Posts/tree/master/TrafficAccidents/data/BankHolidaysScotland.xlsx", sheet = 1)
#
# Observatorio de Inversi칩n P칰blica-SIAF-MEF
#
#
#
library(shiny)
#library(shinyWidgets) #numericRangeInput()
library(shinydashboard)
#library(semantic.dashboard)
library(plotly)
library(DT)
library(lubridate)
library(tidyverse)
#sapply(DataGR, class)
#Cargamos la data del porta de datos abiertos del MEF
DataInversion <- read.csv(file = "ShinyAppSIAF/Data/DETALLE_INVERSIONES.csv")
names(DataInversion)
View(DataInversion)
View(DataInversion)
unique(DataInversion$PRIOR_GN)
unique(DataInversion$PRIOR_GR)
unique(DataInversion$PRIOR_GL)
count(DataInversion$PRIOR_GN)
table(DataInversion$PRIOR_GN)
table(DataInversion$PRIOR_GR)
table(DataInversion$PRIOR_GL)
install.packages("arm")  #Data Analysis Using Regression and Multilevel/Hierarchical Models
install.packages("glmnet") #Lasso and Elastic-Net Regularized Generalized Linear Models
install.packages("psych")
install.packages("pls") #M칤nimos cuadrados parciales y regresi칩n de componentes principales
install.packages("taRifx") #Colecci칩n de funciones de utilidad y conveniencia
install.packages("lmerTest") #Pruebas en modelos lineales de efectos mixtos
install.packages("fastcluster")
install.packages("Cubist") #Modelado de regresi칩n basado en instancias y reglas
install.packages("C50") #츼rboles de decisi칩n y modelos basados en reglas
install.packages("minerva") #Exploraci칩n m치xima no param칠trica basada en informaci칩n para an치lisis de variables
install.packages("flashClust") #Implementation of optimal hierarchical clustering
install.packages("earth") #Splines de regresi칩n adaptativa multivariante
install.packages("kohonen") #Mapas autoorganizados supervisados y no supervisados
install.packages("bnlearn")
install.packages("caroline") #
install.packages("GGally") #Extension to 'ggplot2'
install.packages("factoextra") #Extraiga y visualice los resultados de an치lisis de datos multivariados
install.packages("NeuralNetTools") #Herramientas de visualizaci칩n y an치lisis para redes neuronales
install.packages("circlize") #Circular Visualization
install.packages("kerndwd")
install.packages("party") #A Laboratory for Recursive Partytioning
install.packages("mlbench") #
install.packages("pastecs")
install.packages("klaR")  #Classification and Visualization
install.packages("shinyLP") #Bootstrap Landing Home Pages for Shiny Applications
library(shiny); runApp('~/GitHub/R proyectos/ShinyApps/MLtRS/MLtRS.R')
devtools::install_github("smutchler/micad/micad")
runApp('~/GitHub/R proyectos/ShinyApps/MLdashboard')
devtools::install_github("vqv/ggbiplot")
runApp('~/GitHub/R proyectos/ShinyApps/MLdashboard')
install.packages("xgboots")
install.packages("xgboost") #
install.packages("DataExplorer")
install.packages("mice")
install.packages("mlr3")
install.packages("Superml")
install.packages("superml")
remove.packages("nnet", lib="C:/Program Files/R/R-4.1.2/library")
remove.packages("nnet", lib="~/R/win-library/4.1")
install.packages("wordcloud") #Word Clouds
# El paquete anterior admite mas de 100 idiomas, permite extraer texto de pdf como imagen.
install.packages('tm')        #Tex mining (NLP,slam)
install.packages("mlr")
install.packages("arules") #Reglas de asociaci칩n minera y conjuntos de elementos frecuentes
install.packages("mboost") #Impulso basado en modelos
shiny::runApp('ShinyAppSIAF')
shiny::runApp('ShinyAppSIAF')
shiny::runApp('ShinyAppSIAF')
